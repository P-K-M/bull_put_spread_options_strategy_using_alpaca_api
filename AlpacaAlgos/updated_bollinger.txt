import numpy as np
import pandas as pd
import statsmodels.formula.api as sm
import statsmodels.tsa.stattools as ts

df = pd.read_csv('inputData_GLD_USO.csv')
df['Date'] = pd.to_datetime(df['Date'], format='%Y%m%d').dt.date
df.set_index('Date', inplace=True)

lookback = 20
hedgeRatio = np.full(df.shape[0], np.nan)

for t in np.arange(lookback, len(hedgeRatio)):
    regress_results = sm.ols(formula="USO ~ GLD", data=df[(t - lookback):t]).fit()
    hedgeRatio[t - 1] = regress_results.params.iloc[1]

yport = np.sum(ts.add_constant(-hedgeRatio)[:, [1, 0]] * df, axis=1)
yport.plot()

# Bollinger band strategy
entryZscore = 1
exitZscore = 0

MA = yport.rolling(lookback).mean()
MSTD = yport.rolling(lookback).std()
zScore = (yport - MA) / MSTD

longsEntry = zScore < -entryZscore
longsExit = zScore > -entryZscore

shortsEntry = zScore > entryZscore
shortsExit = zScore < exitZscore

numUnitsLong = np.zeros(longsEntry.shape)
numUnitsLong[:] = np.nan

numUnitsShort = np.zeros(shortsEntry.shape)
numUnitsShort[:] = np.nan

numUnitsLong[0] = 0
numUnitsLong[longsEntry] = 1
numUnitsLong[longsExit] = 0
numUnitsLong = pd.DataFrame(numUnitsLong)
numUnitsLong.ffill(inplace=True)

numUnitsShort[0] = 0
numUnitsShort[shortsEntry] = -1
numUnitsShort[shortsExit] = 0
numUnitsShort = pd.DataFrame(numUnitsShort)
numUnitsShort.ffill(inplace=True)

numUnits = numUnitsLong + numUnitsShort
positions = pd.DataFrame(
    np.tile(numUnits.values, [1, 2]) * ts.add_constant(-hedgeRatio)[:, [1, 0]] * df.values
)
pnl = np.sum((positions.shift().values) * (df.pct_change().values), axis=1)
ret = pnl / np.sum(np.abs(positions.shift()), axis=1)
pd.DataFrame((np.cumprod(1 + ret) - 1)).plot()

print('APR=%f Sharpe=%f' % (np.prod(1 + ret)**(252 / len(ret)) - 1, np.sqrt(252) * np.mean(ret) / np.std(ret)))


def find_stop(current_value, minute_history, now):
    # Reset the entire index, converting it to columns
    minute_history = minute_history.reset_index()

    # Set the 'timestamp' column as the new index
    if 'timestamp' in minute_history.columns:
        minute_history = minute_history.set_index('timestamp')
    else:
        print("Error: 'timestamp' column not found.")
        return current_value * default_stop  # Fallback if timestamp isn't found

    # Proceed with resampling
    series = minute_history['low'][-100:].dropna().resample('5min').min()

    series = series[now.floor('1D'):]

    diff = np.diff(series.values)
    low_index = np.where((diff[:-1] <= 0) & (diff[1:] > 0))[0] + 1

    if len(low_index) > 0:
        return series.iloc[low_index[-1]] - 0.01

    return current_value * default_stop
